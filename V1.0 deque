#include "Libr.h"
#include "Str.h"

template<class T>
std::string toString(const T& value) {
    std::ostringstream os;
    os << value;
    return os.str();
}

void Skaityti1(std::deque<Stud>& A, int& r);
void Skaityti2(std::deque<Stud>& A, int& r);
void Skaityti3(std::deque<Stud>& A, int& r);
void Skaityti4(std::ifstream& fin, std::deque<Stud>& A, int n, int r, float& t, int x);
void Skaityti(std::ifstream& fin, std::deque<Stud>& A);
float Median(Stud A);
void Rusiuoti(std::deque<Stud>& A);
void Rusiuoti(std::deque<Stud>& A, int r);
void Generuoti(int n, int p);
void Paskirstyti(std::deque<Stud>& A, std::deque<Stud>& A1, std::deque<Stud>& A2, int x);
void Isvesti(std::ofstream& fout, std::deque<Stud>& A, int r, std::string m);

int main()
{
    int r = 0, a = 0, n = 1, p, i = 0, x = 0;
    float tvid = 0.0, t;
    std::deque<Stud> A;

    std::cout << "Kaip norite ivesti duomenis?" << std::endl;
    std::cout << "1 - viskas ranka" << std::endl;
    std::cout << "2 - generuoti pažymius" << std::endl;
    std::cout << "3 - generuoti ir pažymius ir studentų vardus, pavardės" << std::endl;
    std::cout << "4 - nuskaityti is failo" << std::endl;
    std::cout << "5 - tik generuoti" << std::endl;
    std::cout << "6 - baigti darbą" << std::endl;
    std::cin >> r;
    while (r < 1 || r > 6) {
        std::cout << "Iveskite dar karta: "; std::cin >> r;
    }
    if (r != 5) {
        if (r == 4) {
            std::cout << "Kokia strategija norite optimizuoti? "; std::cin >> x;
            while (x < 1 || x > 3){
                std::cout << "Iveskite dar karta: "; std::cin >> x;
            }}
        std::cout << "Pagal ka norite rusiuoti?" << '\n';
        std::cout << "Pagal vardus - 1" << '\n';
        std::cout << "Pagal pavardes - 2" << '\n';
        std::cout << "Pagal galutini su vidurkiais - 3" << '\n';
        std::cout << "Pagal galutini su medianomis - 4" << '\n';
        std::cin >> a;
        while (a < 1 || a > 4) {
            std::cout << "Iveskite dar karta: "; std::cin >> a;
        }
    }

    if (r == 1) Skaityti1(A, a);
    if (r == 2) Skaityti2(A, a);
    if (r == 3) Skaityti3(A, a);
    if (r == 4)
    {
        std::cout << "Kiek studentu duomenu norite pamatyti? "; std::cin >> n;
        while (n != 0)
        {
            std::ifstream fin("studentai" + toString(n) + ".txt");
            if (fin.is_open())
            {
                Skaityti4(fin, A, n, a, t, x);
                tvid = tvid + t;
                i++;
            }
            else {
                std::cout << "Kiek bus uzduota namu darbu? "; std::cin >> p;
                Generuoti(n, p);
                std::ifstream fin("studentai" + toString(n) + ".txt");
                Skaityti4(fin, A, n, a, t, x);
                tvid = tvid + t;
                i++;
            }
            std::cout << "Kiek studentu duomenu norite pamatyti? "; std::cin >> n;
        }
        std::cout << "Visos programos laiku vidurkis: " << std::fixed << std::setprecision(3) << tvid / i << " s\n";
        std::cout << '\n';
    }
    if (r == 5) {
        std::cout << "Kiek studentu duomenu norite pamatyti? "; std::cin >> n;
        while (n != 0)
        {
            std::cout << "Kiek bus uzduota namu darbu? "; std::cin >> p;
            auto tpr = high_resolution_clock::now();
            Generuoti(n, p);
            auto tpb = high_resolution_clock::now();
            std::cout << n << " studentu failo generavimo trukme: " << double((duration_cast<milliseconds>(tpb - tpr)).count()) / 1000.0 << " s\n";
            tvid = tvid + double((duration_cast<milliseconds>(tpb - tpr)).count()) / 1000.0;
            i++;
            std::cout << '\n';
            std::cout << "Kiek studentu duomenu norite pamatyti? "; std::cin >> n;
        }
        std::cout << "Visos programos laiku vidurkis: " << std::fixed << std::setprecision(3) << tvid / i << " s\n";
        std::cout << '\n';
    }
    if (r == 6) exit(EXIT_FAILURE);

    return 0;
}
void Skaityti1(std::deque<Stud>& A, int& r)
{
    Stud st;
    std::string vardas;
    int s, i, p;
    std::cout << "Iveskite studento varda: "; std::cin >> vardas;
    while (vardas != "0") {
        s = 0; i = 0;
        st.Vard = vardas;
        std::cout << "Iveskite studento pavarde: "; std::cin >> st.Pavard;

        std::cout << "Iveskite tuos pazymius. Jei daugiau pazymiu nera, iveskite skaiciu '11': "; std::cin >> p;

        while (p != 11) {
            while (p < 0 || p > 11)
            {
                std::cout << "Iveskite tinkama pazymi: "; std::cin >> p;
            }
            st.paz.push_front(p);
            s += p;
            i++;
            std::cin >> p;
        }

        std::cout << "Iveskite egzamino pazymi: "; std::cin >> st.egz;
        while (st.egz < 0 || st.egz > 10)
        {
            std::cout << "Iveskite tinkama pazymi: "; std::cin >> st.egz;
        }

        if (i != 0) {
            st.vid = 0.4 * ((float)s / i) + 0.6 * st.egz;
            st.med = 0.4 * Median(st) + 0.6 * st.egz;
        }
        else {
            st.vid = 0;
            st.med = 0;
        }
        std::cout << "Iveskite studento varda. Jei daugiau studentu nera, iveskite skaiciu '0': "; std::cin >> vardas;
        A.push_front(st);
    }
    if (A.size() == 1 || A.size() == 0)
        std::cout << "Nera studentu\n";

    Rusiuoti(A, r);

    std::cout << "Vardas         Pavarde                  Galutinis(vid.) / Galutinis(med.)" << '\n';
    std::cout << "-------------------------------------------------------------------------" << '\n';
    for (auto j = A.begin(); j != A.end(); j++)
    {
        std::cout << j->Vard << std::setw(16) << j->Pavard << std::setw(10) << '\t';
        std::cout << std::fixed << std::setprecision(2) << j->vid << std::setw(18);
        std::cout << std::fixed << std::setprecision(2) << j->med << '\n';
    }
}
void Skaityti2(std::deque<Stud>& A, int& r)
{
    Stud st;
    srand(time(NULL));
    std::string vardas;
    int s = 0, i, p;
    std::cout << "Iveskite studento varda: "; std::cin >> vardas;
    while (vardas != "0") {
        st.Vard = vardas;
        std::cout << "Iveskite studento pavarde: "; std::cin >> st.Pavard;
        i = 0;
        s = 0;
        p = rand() % 12;
        while (p != 11) {
            st.paz.push_front(p);
            s += p;
            i++;
            p = rand() % 12;
        }

        st.egz = rand() % 11;

        if (i != 0) {
            st.vid = 0.4 * ((float)s / i) + 0.6 * st.egz;
            st.med = 0.4 * Median(st) + 0.6 * st.egz;
        }
        else {
            st.vid = 0;
            st.med = 0;
        }
        std::cout << "Iveskite studento varda. Jei daugiau studentu nera, iveskite skaiciu '0': "; std::cin >> vardas;
        A.push_front(st);
    }
    if (A.size() == 1 || A.size() == 0)
        std::cout << "Nera studentu\n";

    Rusiuoti(A, r);

    std::cout << "Vardas         Pavarde                  Galutinis(vid.) / Galutinis(med.)" << '\n';
    std::cout << "-------------------------------------------------------------------------" << '\n';
    for (auto j = A.begin(); j != A.end(); j++)
    {
        std::cout << j->Vard << std::setw(16) << j->Pavard << std::setw(10) << '\t';
        std::cout << std::fixed << std::setprecision(2) << j->vid << std::setw(18);
        std::cout << std::fixed << std::setprecision(2) << j->med << '\n';
    }
}
void Skaityti3(std::deque<Stud>& A, int& r)
{
    Stud st;
    int s, i, p, v1, v2, n;
    srand(time(NULL));
    std::cout << "Kiek studentu vidurkiu noretumete pamatyti? "; std::cin >> n;
    bool a;
    std::string Vardas[10] = { "Jonas","Amelija","Markas","Sofija","Benas","Liepa","Leonas","Liepa","Storas","Elija" };
    std::string Pavarde[10] = { "Syna","Kaminskaite","Kazlauskas","Vanagaite","Petrauskas","Ratkeviciute","Gradauskas","Petreikyte","Apuole","Sadauskaite" };
    for (int j = 0; j < n; j++)
    {
        v1 = rand() % 10;
        a = v1 % 2;
        st.Vard = Vardas[v1];
        v2 = -1;
        while (v2 == -1 || a != (v2 % 2))
            v2 = rand() % 10;
        st.Pavard = Pavarde[v2];
        i = 0;
        s = 0;
        p = rand() % 12;
        while (p != 11) {
            st.paz.push_front(p);
            s += p;
            i++;
            p = rand() % 12;
        }

        st.egz = rand() % 11;

        if (i != 0) {
            st.vid = 0.4 * ((float)s / n) + 0.6 * st.egz;
            st.med = 0.4 * Median(st) + 0.6 * st.egz;
        }
        else {
            st.vid = 0;
            st.med = 0;
        }
        A.push_front(st);
    }
    if (A.size() == 1 || A.size() == 0)
        std::cout << "Nera studentu\n";

    Rusiuoti(A, r);

    std::cout << "Vardas         Pavarde                  Galutinis(vid.) / Galutinis(med.)" << '\n';
    std::cout << "-------------------------------------------------------------------------" << '\n';
    for (auto j = A.begin(); j != A.end(); j++)
    {
        std::cout << j->Vard << std::setw(16) << j->Pavard << std::setw(10) << '\t';
        std::cout << std::fixed << std::setprecision(2) << j->vid << std::setw(18);
        std::cout << std::fixed << std::setprecision(2) << j->med << '\n';
    }
}
void Skaityti4(std::ifstream& fin, std::deque<Stud>& A, int n, int r, float& t, int x)
{
    std::deque<Stud> A1;
    std::deque<Stud> A2;
    int i = 1;
    auto t1pr = high_resolution_clock::now();
    Skaityti(fin, A);
    Rusiuoti(A);
    Paskirstyti(A, A1, A2, x);
    std::ofstream fa("Nepazenge" + toString(n) + ".txt");
    Isvesti(fa, A1, r, "Nepazengusiuju");
    fa.close();
    if (x == 1) {
        std::ofstream fb("Pazenge" + toString(n) + ".txt");
        Isvesti(fb, A2, r, "Pazengusiuju");
        fb.close();
    }
    A1.clear();
    A2.clear();
    auto t1pb = high_resolution_clock::now();
    std::cout << n << " studentu duomenu apdorojimo bendra trukme: " << double((duration_cast<milliseconds>(t1pb - t1pr)).count()) / 1000.0 << " s\n";
    t = (double((duration_cast<milliseconds>(t1pb - t1pr)).count()) / 1000.0);
    system("pause");
    std::cout << '\n';
}
void Skaityti(std::ifstream& fin, std::deque<Stud>& A)
{
    auto t1 = high_resolution_clock::now();
    Stud st;
    std::string v;
    int n = 0;
    int p, i, j = 0;
    while (v != "Egz.") {
        fin >> v;
        n++;
    }
    n -= 3;
    while (!fin.eof()) {
        fin >> st.Vard;
        fin >> st.Pavard;
        for (i = 0; i < n; i++) {
            fin >> p;
            st.paz.push_front(p);
        }
        fin >> st.egz;
        if (n != 0) {
            st.vid = 0.4 * ((float)(std::accumulate(st.paz.begin(), st.paz.end(), 0)) / n) + 0.6 * st.egz;
            st.med = 0.4 * Median(st) + 0.6 * st.egz;
        }
        else {
            st.vid = 0;
            st.med = 0;
        }
        A.push_front(st);
        st.paz.clear();
    }
    fin.close();
    auto t2 = high_resolution_clock::now();
    std::cout << "Skaitymo trukme: " << double((duration_cast<milliseconds>(t2 - t1)).count()) / 1000.0 << " s\n";
}
float Median(Stud A)
{
    sort(A.paz.begin(), A.paz.end());
    int n = A.paz.size();
    if (n % 2 == 0)
        return (float)A.paz[n / 2];
    else
        return (float)(A.paz[(n - 1) / 2] + A.paz[n / 2]) / 2.0;
}
void Rusiuoti(std::deque<Stud>& A)
{
    auto t1 = high_resolution_clock::now();
    sort(A.begin(), A.end(),
        [](const Stud& a, const  Stud& b) { return (a.vid < b.vid); });
    auto t2 = high_resolution_clock::now();
    std::cout << "Rusiavimo trukme: " << double((duration_cast<milliseconds>(t2 - t1)).count()) / 1000.0 << " s\n";
}
void Rusiuoti(std::deque<Stud>& A, int r)
{
    switch (r) {
    case 1:
        sort(A.begin(), A.end(),
            [](const Stud& a, const Stud& b) { return (a.Vard < b.Vard); });
        break;
    case 2:
        sort(A.begin(), A.end(),
            [](const Stud& a, const Stud& b) { return (a.Pavard < b.Pavard); });
        break;
    case 3:
        sort(A.begin(), A.end(),
            [](const Stud& a, const  Stud& b) { return (a.vid < b.vid); });
        break;
    case 4:
        sort(A.begin(), A.end(),
            [](const Stud& a, const Stud& b) { return (a.med < b.med); });
        break;
    }
}
void Generuoti(int n, int p)
{
    srand(time(NULL));
    std::ofstream fout("studentai" + toString(n) + ".txt");
    fout << "Vardas" << " " << "Pavarde" << " ";
    for (int i = 1; i <= p; i++)
        fout << "ND" << i << " ";
    fout << "Egz." << '\n';

    for (int ii = 1; ii <= n; ii++)
    {
        fout << "Vardas" << ii << " " << "Pavarde" << ii << " ";
        for (int iii = 0; iii <= p; iii++)
            fout << rand() % 11 << " ";
        fout << '\n';
    }
    fout.close();
}
void Paskirstyti(std::deque<Stud>& A, std::deque<Stud>& A1, std::deque<Stud>& A2, int x)
{
    int j = 0;
    auto t1 = high_resolution_clock::now();
    if (x == 1) {
        for (int i = 0; i < A.size(); i++)
        {
            /*j++;
            if (j == 5000000)
            {
                auto t11 = high_resolution_clock::now();
                std::cout << "5 mln. nuskaite per " << double((duration_cast<milliseconds>(t11 - t1)).count()) / 1000.0 << " s\n";
            }*/
            Stud st = A.at(i);
            if (st.vid < 5.0)
                A1.push_front(st);
            else if (st.vid >= 5.0)
                A2.push_front(st);
        }
        A.clear();
    }
    else
        for (int i = 0; i < A.size(); i++)
        {
            /*j++;
            if (j == 50000)
            {
                auto t12 = high_resolution_clock::now();
                std::cout << "50 tukst. nuskaite per " << double((duration_cast<milliseconds>(t12 - t1)).count()) / 1000.0 << " s\n";
            }*/
            if (A.at(i).vid < 5.0) {
                A1.push_front(A.at(i));
                //A.erase(A.begin() + i);
            }
        }
    auto t2 = high_resolution_clock::now();
    std::cout << "Paskirstymo trukme: " << double((duration_cast<milliseconds>(t2 - t1)).count()) / 1000.0 << " s\n";
}
void Isvesti(std::ofstream& fout, std::deque<Stud>& A, int r, std::string m)
{
    auto t1 = high_resolution_clock::now();
    Rusiuoti(A, r);
    fout << "Vardas         Pavarde                  Galutinis(vid.) / Galutinis(med.)" << '\n';
    fout << "-------------------------------------------------------------------------" << '\n';
    for (auto i = A.begin(); i != A.end(); i++)
    {
        fout << i->Vard << std::setw(16) << i->Pavard << std::setw(10) << '\t';
        fout << std::fixed << std::setprecision(2) << i->vid << std::setw(18);
        fout << std::fixed << std::setprecision(2) << i->med << '\n';
    }
    fout.close();
    auto t2 = high_resolution_clock::now();
    std::cout << m << " isvedimo trukme: " << double((duration_cast<milliseconds>(t2 - t1)).count()) / 1000.0 << " s\n";
}
